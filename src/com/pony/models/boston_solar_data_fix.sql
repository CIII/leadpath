-- Add dispositions where there is a manual leadpost and pony-phase is 3

START TRANSACTION;

/* The IDs in the following query were generated by the following query to produce the advertiser_dispositions whose price was set to $0 when it should have been $30.
	SELECT advertiser_dispositions.id
		FROM lead_matches
			JOIN (SELECT * FROM advertiser_dispositions WHERE pony_phase = 3 AND status = 1) advertiser_dispositions ON lead_matches.id = advertiser_dispositions.lead_match_id
		WHERE order_id = 24
			AND advertiser_dispositions.price = 0
*/
UPDATE advertiser_dispositions
    SET price = 30
	WHERE id IN (827330, 827361, 827373, 827408, 827421, 827432, 827439, 827444, 827453, 827467, 827474, 827477, 827480, 827488, 827492, 827499, 827501, 827504);
                
COMMIT;

SELECT * FROM advertiser_dispositions WHERE id = 827330;
                
START TRANSACTION;

INSERT INTO advertiser_dispositions
    (advertiser_id, lead_match_id, status, category, pony_phase, price, comment, created_at)
    SELECT orders.advertiser_id, lead_matches.id, 1, -1, 3, 30, 'Manual submission to Salesforce.', CURRENT_TIMESTAMP()
        FROM lead_matches
            JOIN orders ON lead_matches.order_id = orders.id
            LEFT OUTER JOIN (SELECT * FROM advertiser_dispositions WHERE pony_phase = 3) advertiser_dispositions ON lead_matches.id = advertiser_dispositions.lead_match_id
            LEFT OUTER JOIN lead_posts ON lead_matches.id = lead_posts.lead_match_id
        WHERE lead_matches.order_id = 24
            AND advertiser_dispositions.id IS NULL;
        
COMMIT;

START TRANSACTION;

UPDATE lead_matches
		JOIN (SELECT lead_match_id, SUM(advertiser_dispositions.price) total
			FROM advertiser_dispositions
				JOIN lead_matches ON advertiser_dispositions.lead_match_id = lead_matches.id
            WHERE advertiser_id = 26
				AND pony_phase IN (3, 6, 7)
			GROUP BY lead_match_id
			HAVING MAX(lead_matches.price) <> SUM(advertiser_dispositions.price)
			) AS advertiser_dispositions ON advertiser_dispositions.lead_match_id = lead_matches.id
    SET lead_matches.price = advertiser_dispositions.total;
    
/*
SELECT lead_match_id, MAX(lead_matches.price), SUM(advertiser_dispositions.price), group_concat(advertiser_dispositions.price)
    FROM advertiser_dispositions
        JOIN lead_matches ON advertiser_dispositions.lead_match_id = lead_matches.id
    WHERE advertiser_id = 26 AND pony_phase IN (3, 7)
    GROUP BY lead_match_id
    HAVING MAX(lead_matches.price) <> SUM(advertiser_dispositions.price) 
*/

COMMIT;

START TRANSACTION;

UPDATE lead_matches
		JOIN (SELECT lead_match_id, MAX(lead_matches.price), SUM(advertiser_dispositions.price) total
			FROM advertiser_dispositions
				JOIN lead_matches ON advertiser_dispositions.lead_match_id = lead_matches.id
            WHERE advertiser_id IN (26, 27, 28)
				AND pony_phase IN (3, 6, 7)
			GROUP BY lead_match_id
			HAVING MAX(lead_matches.price) <> SUM(advertiser_dispositions.price)
			) AS advertiser_dispositions ON advertiser_dispositions.lead_match_id = lead_matches.id
    SET lead_matches.price = advertiser_dispositions.total;
    
COMMIT;